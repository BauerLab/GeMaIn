Hmist
Hmisc
library(Hmisc)
library(Hmisc3)
library(brnn)
??brnn
library(rf)
rf
library(randomForest)
.libPaths
.libPaths()
print('hell')
print(.libPaths())
print(Sys.getenv())
getOption("shiny.port")
getOption
?getOption
getOption("shiny.port") = 10
options("shiny.port" = 10)
getOption("shiny.port")
require(Rook)
require(googleVis)
s <- Rhttpd$new()
s$start(listen='127.0.0.1')
my.app <- function(env){
## Start with a table and allow the user to upload a CSV-file
req <- Request$new(env)
res <- Response$new()
## Provide some data to start with
## Exports is a sample data set of googleVis
data <- Exports[,1:2]
## Add functionality to upload CSV-file
if (!is.null(req$POST())) {
## Read data from uploaded CSV-file
data <- req$POST()[["data"]]
data <- read.csv(data$tempfile)
}
## Create table with googleVis
tbl <- gvisTable(data,
options=list(gvis.editor="Edit me!",
height=350),
chartid="myInitialView")
## Write the HTML output and
## make use of the googleVis HTML output.
## See vignette('googleVis') for more details
res$write(tbl$html$header)
res$write("<h1>My first Rook app with googleVis</h1>")
res$write(tbl$html$chart)
res$write('
Read CSV file:<form method="POST" enctype="multipart/form-data">
<input type="file" name="data">
<input type="submit" name="Go">\n</form>')
res$write(tbl$html$footer)
res$finish()
}
s$add(app=my.app, name='googleVisTable')
## Open a browser window and display the web app
s$browse('googleVisTable')
install.packages("Rook")
require(Rook)
require(googleVis)
s <- Rhttpd$new()
s$start(listen='127.0.0.1')
my.app <- function(env){
## Start with a table and allow the user to upload a CSV-file
req <- Request$new(env)
res <- Response$new()
## Provide some data to start with
## Exports is a sample data set of googleVis
data <- Exports[,1:2]
## Add functionality to upload CSV-file
if (!is.null(req$POST())) {
## Read data from uploaded CSV-file
data <- req$POST()[["data"]]
data <- read.csv(data$tempfile)
}
## Create table with googleVis
tbl <- gvisTable(data,
options=list(gvis.editor="Edit me!",
height=350),
chartid="myInitialView")
## Write the HTML output and
## make use of the googleVis HTML output.
## See vignette('googleVis') for more details
res$write(tbl$html$header)
res$write("<h1>My first Rook app with googleVis</h1>")
res$write(tbl$html$chart)
res$write('
Read CSV file:<form method="POST" enctype="multipart/form-data">
<input type="file" name="data">
<input type="submit" name="Go">\n</form>')
res$write(tbl$html$footer)
res$finish()
}
s$add(app=my.app, name='googleVisTable')
## Open a browser window and display the web app
s$browse('googleVisTable')
s <- Rhttpd$new()
s$start(listen='127.0.0.1')
s$browse('googleVisTable')
install.packages('googleVis')
require(Rook)
require(googleVis)
s <- Rhttpd$new()
s$start(listen='127.0.0.1')
my.app <- function(env){
## Start with a table and allow the user to upload a CSV-file
req <- Request$new(env)
res <- Response$new()
## Provide some data to start with
## Exports is a sample data set of googleVis
data <- Exports[,1:2]
## Add functionality to upload CSV-file
if (!is.null(req$POST())) {
## Read data from uploaded CSV-file
data <- req$POST()[["data"]]
data <- read.csv(data$tempfile)
}
## Create table with googleVis
tbl <- gvisTable(data,
options=list(gvis.editor="Edit me!",
height=350),
chartid="myInitialView")
## Write the HTML output and
## make use of the googleVis HTML output.
## See vignette('googleVis') for more details
res$write(tbl$html$header)
res$write("<h1>My first Rook app with googleVis</h1>")
res$write(tbl$html$chart)
res$write('
Read CSV file:<form method="POST" enctype="multipart/form-data">
<input type="file" name="data">
<input type="submit" name="Go">\n</form>')
res$write(tbl$html$footer)
res$finish()
}
s$add(app=my.app, name='googleVisTable')
## Open a browser window and display the web app
s$browse('googleVisTable')
s$browse('googleVisTable')
library(Rserve)
Rserve()
install.packages("RServe")
install.packages("Rserve")
library(Rserve)
Rserve()
library(Rserve)
Rserve("--no-save")
Rserve(args="--no-save")
q()
library('Rserve')
Rserve()
Rserve(args='--vanilla')
Rserve(args='--vanilla', port=9000)
ls9)
ls()
ls
ls()
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
variants
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
varImpPlot(model)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
source('~/edu/stats/genom-model.R', echo=TRUE)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/.active-rstudio-document', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
source('~/edu/stats/genom-model.R', echo=TRUE)
varImpPlot(model)
install.packages('knitr')
library(randomForest)
source('~/.active-rstudio-document', echo=TRUE)
variants[,7]*variants[,8]*variants[,9]*rnorm(subjecNo,10,0.5) +
sqrt(q0)
sqrt(10)
qnorm
?qnorm
sigma <- 5
n <- 200
meandiff <- 5
StatZ <- meandiff/(sigma/sqrt(n))
StatZ
qnorm(StatZ,lower.tail=FALSE)
dnorm(StatZ,lower.tail=FALSE)
pnorm(StatZ,lower.tail=FALSE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
(1-p)^1000
2^4
p
(1-p)
p
source('~/.active-rstudio-document', echo=TRUE)
p
1-p
log(1-p)
log(p)
log(1-p)
log(1-p)*1000000
exp(log(1-p)*1000000)
exp(log(1-p)*10000000)
1-exp(log(1-p)*10000000)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
p*(1-p)
p
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/edu/stats/genom-ztest.R', echo=TRUE)
setwd("~/dev/variantspark/R")
data <-read.csv('wide-data.csv', header=FALSE)
summary(data)
str(data)
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
X
class(X)
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
y
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
X
head(data)
summary(data[,1])
?read.csv
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
y
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
X
y
data[1,]
y = as.factor(data[1,])
y <- as.factor(data[1,])
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
y
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
plot(model)
?randomForest
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
varImpPlot(model)
model$err.rate
randomForest
?randomForest
model$forest
str(model$forest)
model$forest$ndbigtree
model$forest
str(model$forest)
str(model)
model$importance
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
varImpPlot(model)
source('~/dev/variantspark/R/testRandomForest.R', echo=TRUE)
varImpPlot(model)
randomForest
